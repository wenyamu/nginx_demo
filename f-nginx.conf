############################################
#
# 此文件做为转发服务器nginx的配置文件
#
############################################

# weight 表示权重，值越大表示权重越高，优先级越高，被访问到的次数越多，缺省值为1
# max_fails 表示允许最大失败次数，缺省值为1
# fail_timeout 表示…………，缺省值为10

#跳转实现：以下三种情况全部跳转到 https://xxx.com
#http://xxx.com
#http://www.xxx.com
#https://www.xxx.com


# staticServer 为静态服务器(nginx)的集合，负载均衡服务节点

upstream staticServer {
    #ip_hash; #让相同的客户端ip请求相同的服务器
    
    #nginx容器所在宿主机ip:宿主机端口（映射容器的80端口）
    server 80.211.236.100:81 weight=1 max_fails=2 fail_timeout=15;
    #server 15.32.58.69:82 weight=1 max_fails=2 fail_timeout=15;

}

upstream staticServer443 {
    #ip_hash; #让相同的客户端ip请求相同的服务器
    
    #nginx容器所在宿主机ip:宿主机端口（映射容器的80端口）
    server 80.211.236.100:444 weight=1 max_fails=2 fail_timeout=15;
    #server 15.32.58.69:445 weight=1 max_fails=2 fail_timeout=15;

}

upstream phpfpmhost {
    #ip_hash; #让相同的客户端ip请求相同的服务器
    #nginx容器所在宿主机ip:宿主机端口（映射容器的80端口）
    #server 15.32.58.69:9001 weight=1 max_fails=2 fail_timeout=15; 
    #server 15.32.58.69:9002 weight=1 max_fails=2 fail_timeout=15;
    #server 15.32.58.69:9003 weight=1 max_fails=2 fail_timeout=15;
    server 80.211.236.100:9004 weight=1 max_fails=2 fail_timeout=15;

}

#为了实现 http://www.site.com 和 http://site.com 跳转到 https://site.com
server {
    listen 80;
    listen [::]:80;
    server_name site.com www.site.com; #绑定域名（前面是域名，后面是别名）
    rewrite ^(.*)$ https://site.com$1 permanent;
    #return 301 https://site.com$request_uri;#效果同 rewrite
    
    index index.html index.htm index.php; #默认文件
    root /usr/share/nginx/html/site.com; #网站目录，即本nginx容器中的目录（本 nginx 为转发，当http://site.com后不指定文件时会出现错误，所以必须要有此设置）
    server_tokens off;  #隐藏nginx版本号
    
    access_log /var/log/nginx/site.com.80.f.access.log main;
    error_log /var/log/nginx/site.com.80.f.error.log error;

    location ~ \.php$ {
        root /var/www/html/site.com; #指向地址 phpfpmhost/var/www/html/site.com/xxx.php
        fastcgi_pass phpfpmhost;
        fastcgi_index index.php;
        # 开启拦截 php-fpm 页面错误，如果有错误就转到 error_page 设置的错误页面
        fastcgi_intercept_errors on;
        include fastcgi_params;#/etc/nginx/fastcgi_params
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        proxy_set_header Host $host;
    }
    
    location ~ .*\.(html|htm)$ {
        proxy_pass http://staticServer; #指向地址 http://staticServer/usr/share/nginx/html/site.com/xxx.html
        #proxy_set_header Host $host;
        # 开启拦截 proxy_pass 页面错误，如果有错误就转到 error_page 设置的错误页面
        proxy_intercept_errors on;
        #当 upstream 中的某个服务器发生了 错误、超时、返回500状态码等异常时，转向下一台服务器
        proxy_next_upstream error timeout http_500;
    }

    location ~ .*\.(gif|jpg|jpeg|png|bmp)$ {
        proxy_pass http://staticServer;
        #proxy_set_header Host $host;
        # 开启拦截 proxy_pass 页面错误，如果有错误就转到 error_page 设置的错误页面
        proxy_intercept_errors on;
    }

    location ~ .*\.(js|css)$ {
        proxy_pass http://staticServer;
        #proxy_set_header Host $host;
        # 开启拦截 proxy_pass 页面错误，如果有错误就转到 error_page 设置的错误页面
        proxy_intercept_errors on;
    }

}

#为了实现 https://www.site.com 跳转到 https://site.com
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.site.com; #绑定域名
    #开启 SSL
    ssl_certificate /ssl/site.com/fullchain.pem;
    ssl_certificate_key /ssl/site.com/privkey.pem;
    rewrite ^(.*)$ https://site.com$1 permanent;
    #return 301 https://site.com$request_uri;#效果同 rewrite
}


#https://site.com 所以不用加跳转命令
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name site.com; #绑定域名
    
    index index.html index.htm index.php; #默认文件
    #网站目录，即本nginx容器中的目录（本 nginx 为转发，当http://site.com后不指定文件时会出现错误，所以必须要有此设置）
    root /usr/share/nginx/html/site.com;
    server_tokens off;  #隐藏nginx版本号
    
    access_log /var/log/nginx/site.com.443.f.access.log main;
    error_log /var/log/nginx/site.com.443.f.error.log error;
    
    # 开启 OCSP stapling
    ssl_stapling on;
    # 验证OCSP响应是否可信
    ssl_stapling_verify on;
    # 将OCSP响应缓存到磁盘上，这样即使服务器重启，OCSP响应也不会丢失（使用 openssl ocsp 命令生成）
    #ssl_stapling_file /ssl/site.com/stapling_file.ocsp;
    # resolver: 配置 DNS 解析器，用于获取 OCSP 响应。valid: 指定 OCSP 响应缓存的有效时间。
    #resolver 8.8.8.8 8.8.4.4 valid=300s;
    # 指定解析器超时时间
    #resolver_timeout 5s;
    # 提供CA证书链，用于验证OCSP响应。如果有多个CA证书，用空格分隔
    #ssl_trusted_certificate /ssl/site.com/ca.pem;
    
    #开启 SSL
    ssl_certificate /ssl/site.com/fullchain.pem;
    ssl_certificate_key /ssl/site.com/privkey.pem;
    
    #开启 HSTS
    add_header Strict-Transport-Security "max-age=31536000";
    
    # yourls 短链接跳转重写规则
    location / {
        try_files $uri $uri/ /yourls-loader.php$is_args$args; # $is_args 表示 ?
    }
    
    #实现https://xxx.com/post/abc.php隐藏php后缀的效果，即：https://xxx.com/post/abc, 当目录post下有目录abc时，就会出错
    #location / {
    #    try_files $uri $uri/ $uri.php?$args;
    #}

    #php 动态页面转发规则
    location ~ .*\.(php)$ {
        root /var/www/html/site.com; #指向地址 phpfpmhost/var/www/html/site.com/xxx.php
        fastcgi_pass phpfpmhost;
        fastcgi_index index.php;
        # 开启拦截 php-fpm 页面错误，如果有错误就转到 error_page 设置的错误页面
        fastcgi_intercept_errors on;
        include /etc/nginx/fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

    }
    
    #html 静态页面转发规则
    location ~ .*\.(html|htm)$ {
        proxy_pass https://staticServer443;
        proxy_set_header Host $host;
        # 开启拦截 proxy_pass 页面错误，如果有错误就转到 error_page 设置的错误页面
        proxy_intercept_errors on;
        #当 upstream 中的某个服务器发生了 错误、超时、返回500状态码等异常时，转向下一台服务器
        proxy_next_upstream error timeout http_500;
    }
    
    #把图片格式转发到静态服务器上，比如 https://site.com/b/cat.png 转发给 https://staticServer443/b/cat.png
    #注意：转发服务器上可以没有 /b/cat.png 但静态服务器上一定要有 /b/cat.png 不然就会404
    #以下的前提是静态服务器上没有对图片添加规则,如果添加了规则，最终图片路径还要看静态服务器上规则。
    
    location ~ .*\.(gif|jpg|jpeg|png|bmp)$ {
        proxy_pass https://staticServer443;
        #proxy_set_header Host $host;
        proxy_intercept_errors on;
    }
    
    location ~ .*\.(js|css)$ {
        proxy_pass https://staticServer443;
        #proxy_set_header Host $host;
        proxy_intercept_errors on;
    }

    # error_page [状态值,可以有多个用空格分隔] [指定路径]
    # 当php服务关闭时 404.php 失效，当静态服务关闭时 404.html 失效。不推荐
    #error_page 404 502 /errpage/404.php;#/usr/share/nginx/html/site.com/errpage/404.php

    # 推荐下面写法 文件在转发服务器上
    error_page 500 502 503 504 /5x.html;
    error_page 400 404 /4x.html;

    location = /4x.html{
        root /usr/share/nginx/html/site.com/errpage;
    }

    location = /5x.html{
        root /usr/share/nginx/html/site.com/errpage;
    }

}


#设置禁止IP及未绑定域名访问（以下三种均测试通过，只在转发nginx服务器配置文件中设置即可）
#第一种，返回指定错误

#444 No Response
#Nginx上HTTP服务器扩展。服务器不向客户端返回任何信息，并关闭连接（有助于阻止恶意软件）。
#此时浏览器会提示你，网络未连接

server {
    listen 80 default_server; #必须加上 default_server，不然会失效
    listen [::]:80 default_server; #必须加上 default_server，不然会失效
    server_name _;
    return 444; #返回错误
}

server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    server_name _;
    
    #（以下两项不可少，且文件必须真实存在，不然nginx无法启动，此处为自签发的证书）
    ssl_certificate /ssl/nginx.crt;
    ssl_certificate_key /ssl/nginx.key;

    return 444;
}

#第二种，跳转到指定域名
#server {
#    listen 80 default_server; #必须加上 default_server，不然会失效
#    listen [::]:80 default_server; #必须加上 default_server，不然会失效
#    server_name _;
#    rewrite ^(.*) http://baidu.com permanent;
#}

#第三种，跳转到指定目录或文件
#server {
#    listen 80 default_server; #必须加上 default_server，不然会失效
#    listen [::]:80 default_server; #必须加上 default_server，不然会失效
#    server_name _;
#    index index.html index.htm; #默认文件，此时只作静态转发，php文件无法解析，php文件会被直接下载
#    root /web/err;
#}
